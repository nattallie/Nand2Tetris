/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
	Inc16(in=lastOut, out=lastOutIncr);
	Mux16(a=lastOut, b=lastOutIncr, sel=inc, out=inclIncr);
	Mux16(a=inclIncr, b=in, sel=load, out=inclLoad);
	Mux16(a=inclLoad, b=false, sel=reset, out=nextOut);

	Register(in=nextOut, load=true, out=lastOut, out=out);

//	Register(in=curOut, load=true, out=lastOut);
//	Register(in=in, load=true, out=lastIn);
//	Bit(in=reset, load=true, out=rstLast);
//	Bit(in=load, load=true, out=loadLast);
//	Bit(in=inc, load=true, out=incLast);

//	Mux16(a=lastOut, b=false, sel=rstLast, out=rstChecked);

//	Not(in=rstLast, out=notRst);	
//	And(a=notRst, b=loadLast, out=notRstAndLoad);

//	Mux16(a=rstChecked, b=lastIn, sel=notRstAndLoad, out=loadChecked);

//	Not(in=loadLast, out=notLoad);
//	And(a=notRst, b=notLoad, out=notRstAndNotLoad);
//	And(a=notRstAndNotLoad, b=incLast, out=incIsRight);

//	Inc16(in=lastOut, out=incrd);
//	Mux16(a=loadChecked, b=incrd, sel=incIsRight, out=curOut, out=out);

}

