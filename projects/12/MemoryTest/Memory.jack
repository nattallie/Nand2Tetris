// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array memory;
    static Array freeList;

    /** Initializes the class. */
    function void init() {
        let freeList = 2048;
        let freeList[0] = 2;
        let freeList[1] = 2050;
        let freeList[2] = 14333;
        let freeList[3] = null;
        let memory = 0;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int f_ind, prev_seg, rem, next_seg;
        var Array cur_seg;
        let f_ind = 0;
        let cur_seg = freeList;

        while ((freeList[f_ind] < (size + 1)) & (~(cur_seg = null))) {
            let prev_seg = cur_seg;
            let cur_seg = freeList[f_ind + 1];
            let f_ind = freeList[f_ind + 1] - freeList;
        }

        if (cur_seg = null) {
            return null;
        }

        if (freeList[f_ind] > (size + 1)) {
            let rem = freeList[f_ind] - size - 1;
            let freeList[f_ind] = rem;
            let freeList[f_ind + rem] = size + 1;
            return (freeList + f_ind + rem + 1);
        } else {
            let next_seg = freeList[f_ind + 1];
            let memory[prev_seg + 1] = next_seg;
        }
        return (cur_seg + 1);
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array prev_seg, new_seg;
        let new_seg = o - 1;
        let prev_seg = freeList[1];
        let freeList[1] = new_seg;
        let o[0] = freeList[1];
        return;
    }    
}
