// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static int n_bits;
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i;
        var int twos_deg;
        let n_bits = 16;
        let twoToThe = Array.new(n_bits);
        let twos_deg = 1;
        let i = 0;
        while (i < n_bits) {
            let twoToThe[i] = twos_deg;
            let twos_deg = twos_deg + twos_deg;
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x > 0) {
            return x;
        } else {
            return -x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        let sum = 0;
        let shiftedX = x;
        let i = 0;
        while (i < n_bits) {
            if (~((Math.bit(y, i)) = 0)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, tmp, sign;

        let sign = 1;

        if (x < 0) {
            let sign = Math.multiply(sign, -1);
        }

        if (y < 0) {
            let sign = Math.multiply(sign, -1);
        }
 
        let x = Math.abs(x);
        let y = Math.abs(y);

        if (y > x) {
            return 0;
        }

        let q = Math.divide(x, y + y);
        if ((x - (2 * q * y)) < y ) {
            return Math.multiply((q + q), sign);
        } else {
            return Math.multiply((q + q + 1), sign);
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, i, without_sq, sq;
        let y = 0;
        let i = (Math.divide(n_bits, 2)) - 1;
        while (~(i < 0)) {
            let without_sq = y + twoToThe[i];
            let sq = Math.multiply(without_sq, without_sq);
            if (~(sq > x) & (sq > 0)) {
                let y = y + twoToThe[i];
            }
            let i = i - 1;
        }   
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }

    function int bit(int x, int j) {
        return (x & twoToThe[j]);
    }
}
