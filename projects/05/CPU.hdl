// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        And(a=instruction[3], b=instruction[15], out=writeM);

        Mux16(a=instruction, b=lastOut, sel=instruction[15], out=forA);

        Not(in=instruction[15], out=noti15);
        Or(a=instruction[5], b=noti15, out=saveA);
        ARegister(in=forA, load=saveA, out=fromA, out[0..14]=addressM);

        Mux16(a=fromA, b=inM, sel=instruction[12], out=AM);

        ALU(x=fromD, y=AM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=lastOut, out=outM, zr=zr, ng=ng);

        And(a=instruction[4], b=instruction[15], out=saveD);
        DRegister(in=lastOut, load=saveD, out=fromD);

        And(a=zr, b=instruction[1], out=c1);
        And(a=ng, b=instruction[2], out=c2);
        Or(a=zr, b=ng, out=notPos);
        Not(in=notPos, out=pos);
        And(a=pos, b=instruction[0], out=c0);
        And(a=instruction[1], b=instruction[0], out=allOne);
        And(a=allOne, b=instruction[2], out=jmp);

        Or(a=jmp, b=c0, out=load1);
        Or(a=c1, b=c2, out=load2);
        Or(a=load1, b=load2, out=load3);
        And(a=instruction[15], b=load3, out=load);

        PC(in=fromA, load=load, inc=true, reset=reset, out[0..14]=pc);
}